Лабораторная работа 2. ИКНТ, Борисова Мария ИТ18 – группа LAB8

Лабораторная работа представляет из себя:
1.Класс Main – главный класс, который вызывает в себе классы заданий 1-5
2.Классы заданий 1 – 5
  1) public class Name
  2) public class People
  3) public class PeopleWithAge
  4) public class City 
  5) public class Cat
3.Класс GlobalVerification – вспомогательный класс проверок ввода пользователя

Рассмотрим систему работы классов индивидуально

Класс Main
Класс Main в общей структуре состоит из цикла while, который прокручивает реализацию всех заданий, 
выбор самих заданий в свою очередь осуществляется с помощью конструкции 
switсh-case – пользователь выбирает какое задание он предпочитает просмотреть и в зависимости от его выбора реализуется соответствующий case
System.out.println("№ Задания");
System.out.println("1 - Создание личностей ФИО");
System.out.println("2 - Создание личностей ФИО с ростом");
System.out.println("3 - Создание человека с родителем.");
System.out.println("4 - Создание системы городов и маршрутов");
System.out.println("5 - Создание имен с разными конструкторами");
System.out.println("6 - Создание человека разными способами");
System.out.println("7 - Создание Кота Барсика");
System.out.println("0 - ВЫХОД");

Задание 1 – (1 - Создание личностей ФИО)
В данном задании было необходимо создать сущность Name, которая задана данными параметрами
Фамилия, Личное имя, Отчество. 
Имя может быть приведено к строковому виду, включающему традиционное представление всех трех параметров: Фамилия Имя Отчество (например “Иванов Иван Иванович”). 
Необходимо предусмотреть возможность того, что какой-либо из параметров может быть не задан, и в этом случае он не учитывается при приведении к текстовому виду. 
Необходимо создать следующие имена: 
• Клеопатра 
• Пушкин Александр Сергеевич 
• Маяковский Владимир 
Обратите внимание, что при выводе на экран, не заданные параметры никак не участвуют в образовании строки.

В ходе выполнения данного задания был создан case 1, в котором вызывался класс Name

Система case 1:
Запрос количества личностей:
    System.out.println("Сколько личностей вы хотите создать?");
    int numberOfPerson = scanner.nextInt();
    numberOfPerson = mistake.numberNum(numberOfPerson); // Валидация ввода
    scanner.nextLine(); // Очистка буфера
Создание массива объектов
    Name[] persons = new Name[numberOfPerson];
Цикл создания личностей:
    for (int i = 0; i < numberOfPerson; i++) {
        System.out.println("Ввод данных для личности " + (i + 1));
        persons[i] = new Name(); // Создание нового объекта Name
    }
Вывод созданных личностей:
    for (int i = 0; i < persons.length; i++) {
        System.out.println("Личность " + (i + 1) + ": " + persons[i].toString());
    }
Возврат в меню:
    choice = mistake.meni(1);
    break;

Система класса Name:
Класс содержит в себе реализацию двух заданий – 1 и 4.5, так же он участвует в слиянии двух классов в итоговом public class PeopleWithAge
Класс состоит из конструкторов, свойств, и методов.

Конструкторы, свойства:
public Name()
public Name(String name)
public Name(String name, String surname)
public Name(String name, String surname, String middleName)
public String getName()
public String getSurname()
public String getMiddleName()
public void setSurname(String surname) 
public void setMiddleName(String middleName)

Методы:
public String toString()
Метод вывода введённых данных
Пример:
Личность 1: Иван Иванов Иванович

Задание 2 – (2 - Создание личностей ФИО с ростом, 3 - Создание человека с родителем)
В данном задании было необходимо решить два задания:

2.2 - Объедините сущности Человек из задачи 1.2 и Имя из задачи 1.3 таким образом, чтобы имя человека задавалось с использованием сущности 1.3, а не строки. 
Необходимо объединить ранее созданные объекты имен и людей, с получением: 
• Человека с Именем Клеопатра и ростом 152 
• Человека с Именем Пушкин Александр Сергеевичи ростом 167 
• Человека с Именем Маяковский Владимир и ростом 189

Для реализации этого задания был создан класс public class People – задание 1.2, так как по условию задачи нам нужно было объединить классы Name и People вместе,
и класс public class PeopleWithAge – являющийся соответcтвенно объединением данных классов.

2.3 - Измените сущность Человек из задачи 2.2 добавив ему возможность задавать третий параметр: Отец, где Отец — это тоже Человек. 
При приведении человека к строковой форме необходимо проверить параметры имени, и в зависимости от ситуации выполнить одно из следующих действий: 
• Если у данного человека нет фамилии, и есть отец, у которого фамилия задана, то фамилию необходимо сделать такой же как у отца.
• Если у данного человека нет отчества, а у отца есть имя, то необходимо задать отчество как имя отца с добавлением суффикса “ович”. 
Затем необходимо выполнить следующие задачи: 
1. Создать людей: Чудова Ивана, Чудова Петра, Бориса 
2. Сделать Ивана отцом Петра, а Петра отцом Бориса 
3. Вывести на экран строковое представление всех троих людей.

По условию задачи нужно было дополнить полученный класс объединений public class PeopleWithAge до условия задач.

Таким образом, класс People содержит в себе конструкторы, свойства, методы.

Конструкторы, свойства:
public People()
public People(boolean noHeight) 
public People(int height)
public int getHeight()

Методы:
public String toString
Метод формирует текстовое представление роста объекта.
Пример:
". . ." рост 157

Класс PeopleWithAge содержит в себе конструкторы, свойства, методы реализующие задания 2.3, 4.6.

Свойства и конструкторы:
public PeopleWithAge(Name name, People people)
public PeopleWithAge(Name name)
private PeopleWithAge(Name name, People people, PeopleWithAge father) 
public PeopleWithAge(String name, int height)
public PeopleWithAge(String name, int height, PeopleWithAge father)
public PeopleWithAge(Name name, int height)
public PeopleWithAge(Name name, int height, PeopleWithAge father)
public PeopleWithAge getFather()
public Name getName()
public People getPeople()
private void setSurname(String surname)
private void setMiddleName(String middleName) 
public void setFather(PeopleWithAge father)

Методы:
1) private void adjustNameFromFather()
Метод автоматически формирует ФИО текущего объекта на основе имени отца.
Пример:
Сын - Иван
Отец - Иван Иванов
Итог - Сын Иван Иванов Иванович

2) private void checkAndCompleteNameFromFather()
Метод проверяет и дополняет ФИО текущего объекта на основе данных отца, с интерактивным вводом при недостающих данных. 
1) Проверяет наличие отца.
2) Логика для фамилии: Если у текущего объекта нет фамилии: Берет фамилию отца, если она есть.
Если у отца нет фамилии - запрашивает ввод у пользователя. 
3) Логика для отчества: Если у текущего объекта нет отчества: Формирует отчество от имени отца (имя + "ович") 
Если у отца нет имени - запрашивает ввод у пользователя
Пример:
сын - Иван
Есть ли у сынв отец? - да/нет
да -> (ввод данных отца) - Иван Иванов
сын - Иван Иванов Иванович

3) private void checkFatherData()
Метод проверяет и автоматически дополняет фамилию и отчество текущего объекта на основе данных отца при определённых условиях 
Заполняет фамилию ТОЛЬКО если: у текущего объекта нет фамилии, и у отца есть фамилия. 
Формирует отчество ТОЛЬКО если: У текущего объекта нет отчества, и у отца есть имя.
Пример: 
сын - Иван Иванов Иванович.
заполнение не нужно, все данные имеются

4) public String toString()
Метод формирует текстовое представление объекта в двух разных форматах в зависимости от наличия роста.
Пример:
Иван Иванов Иванович, 156 рост - для задания 2.3
Иван Иванов Иванович - для задания 4.6

5) public boolean checkDataWithFather(Scanner scanner)
Метод проверяет, соответствуют ли фамилия и отчество человека данным его отца, и при необходимости исправляет их через ввод пользователя.
Пример:
сын - Иван Иванов
отец Иван Фролов
ошибка! Фамилии отца и сына не совпадают, введите правильную фамилию
сын - Иван Фролов
отец - Иван Фролов

Для реализации заданий 2.2 и 2.3 был создан Case 2 и Case 3
Система Case 2:
Запрос количества личностей:
    int numberOfPersonEx2 = scanner.nextInt();
    numberOfPersonEx2 = mistake.numberNum(numberOfPersonEx2); // Валидация
Создание массива расширенных личностей
    PeopleWithAge[] personsEx2 = new PeopleWithAge[numberOfPersonEx2];
Цикл создания личностей с дополнительными данными:
  1) Создание ФИО:
        System.out.println("Введите Имя Фамилию Отчество");
        Name nameOfPerson = new Name(); // Объект с ФИО
  2) Ввод роста:
        System.out.print("Введите рост: ");
        int height = scanner.nextInt();
        height = mistake.height(height); // Валидация роста
  3) Создание комбинированного объекта:
        People peopleWithHeight = new People(height); // Объект с ростом
        personsEx2[i] = new PeopleWithAge(nameOfPerson, peopleWithHeight); // Объединение
Вывод созданных личностей:
     for (int i = 0; i < personsEx2.length; i++) {
        System.out.println((i + 1) + ". " + personsEx2[i].toString());
    }
Возврат в меню:
    choice = mistake.meni(2);
    break;

Система Case 3:
Инициализация:
    PeopleWithAge[] peopleArray = new PeopleWithAge[20]; // Массив для хранения людей
    int peopleCount = 0; // Счетчик созданных людей
Создание основного человека:
    Name mainPersonName = new Name();
    PeopleWithAge mainPerson = new PeopleWithAge(mainPersonName);
    peopleArray[peopleCount] = mainPerson;
    peopleCount++;
Рекурсивное создание родственников:
    1) Отец основного человека:
        if ("да".equals(hasFather)) {
            Name fatherName = new Name();
            PeopleWithAge father = new PeopleWithAge(fatherName);
            mainPerson.setFather(father); // Установка связи
        }
    2) Дедушка (отец отца):
        if ("да".equals(hasGrandfather)) {
            Name grandfatherName = new Name();
            PeopleWithAge grandfather = new PeopleWithAge(grandfatherName);
            father.setFather(grandfather); // Установка связи
        }
Валидация данных:
    while (dataIsCorrect == false) {
        dataIsCorrect = mainPerson.checkDataWithFather(scannerCase3);
    } (Проверяет корректность родственных связей (например, что отец старше сына).

Задание 3 – (4 - Создание системы городов и маршрутов.)
В данном задании было необходимо создать сущность City, соответствующей данным параметрам
Создайте сущность Город, которая будет представлять собой точку на карте со следующими характеристиками: 
• Название города 
• Набор путей к следующим городам, где путь представляет собой сочетание Города и стоимости поездки в него. 
Кроме того, Город может возвращать текстовое представление, в виде названия города и списка связанных с ним городов (в виде пары: “название:стоимость”). 
Используя разработанную сущность реализуйте схему, представленную на рисунке 2.
(Схему можно посмотреть в текстовом документе лабораторной работы)

В ходе выполнения данного задания был создан case 4, в котором вызывался класс City.
Система case 4:
Создание городов:
City cityA = new City("A");
City cityB = new City("B");
// ... всего 6 городов: A, B, C, D, E, F

Построение маршрутной сети:
cityA.addRoute(cityF, 1); // Из A в F стоимостью 1
cityA.addRoute(cityD, 6); // Из A в D стоимостью 6
cityA.addRoute(cityB, 5); // Из A в B стоимостью 5
// ... и так для всех городов

Система класса City:
Класс содержит в себе свойства, конструкторы и методы.

Свойства и конструкторы:
public City(String name) 
public String getName()
public int getRouteCount()
public City getConnectedCity(int index) 
public int getCost(int index) 

Методы:
1) public void addRoute(City city, int cost)
Метод добавляет новый маршрут из текущего города в другой город с указанной стоимостью.
Пример:
Город 'A' - (F: 1)

2) public String toString()
Метод формирует текстовое представление города и маршрутов со стоимостью в другие города
Пример:
Город 'A' - (F: 1, D: 6, B: 5)

Задание 4 – (5 - Создание имен с разными конструкторами, 6 - Создание человека разными способами.)
В данном задании было необходимо решить два задания:
4.5 - Измените сущность Имя из задачи 1.3. Новые требования включают:
• Имя можно создать указав только Личное имя
• Имя можно создать указав Личное имя и Фамилию. 
• Имя можно создать указав все три параметра: Личное имя, Фамилию, Отчество.
Необходимо создать следующие имена: 
1. Клеопатра 
2. Александр Сергеевич Пушкин 
3. Владимир Маяковский 
4. Христофор Бонифатьевич (здесь Христофор это имя, а Бонифатьевич - фамилия)

4.6 - . Измените сущность Человек из задачи 2.3. Новые требования включают:
• Человека можно создать с указанием имени в виде строки и роста в виде целого числа. 
При таком способе задания имени должно считаться, что Человеку задано только личное имя. 
• Человека можно создать с указанием имени в виде строки, роста в виде целого числа и отца в виде Человека. В этом случае необходимо 
проставить отчество в соответствии с именем отца и присвоить текущему человеку фамилию отца. 
• Человека можно создать с указанием имени в виде объекта типа Имя (из задачи 4.5) и роста в виде целого числа. 
• Человека можно создать с указанием имени в виде объекта типа Имя (из задачи 4.5), роста в виде целого числаи отца в виде Человека. 
В этом случае необходимо проверить что в Имени задано отчество и фамилия, и если они не заданы, то необходимо их задать 
(отчество в соответствии с именем отца и фамилию отца). 
• Реализуйте описанные способы создания Человека таким образом, чтобы операции присвоения использовались только в одном из конструкторов. 
• Необходимо модифицировать способ приведения Человека к строке, теперь текстовая форма должна быть представлена строкой: “Имя, рост” 
Создайте и выведите на экран следующие объекты: 
1. Человека с именем Лев (в виде строки) и ростом 170 
2. Человека с именем Пушкин Сергей (как Имя), ростом 168 и отцом Львом (предыдущий Человек) 
3. Человека с именем Александр (в виде строки), ростом 167 и отцом Сергеем (предыдущий Человек

Реализация данных задач представлена в виде дополнений классов Name и PeopleWithAge, структуры данных классов можно посмотреть в задачах 1 и 2, указанных выше
Для реализации данных задач были созданы Case 5 и Case 6

Система Case 5:
ВВнутренний switch-case
Case "1" - Только имя:
    System.out.print("Введите имя: ");
    String name = scannerCase5.nextLine();
    newName = new Name(name);  // Конструктор с одним параметро

Case "2" - Имя и фамилия:
    System.out.print("Введите имя: ");
    String name2 = scannerCase5.nextLine();
    System.out.print("Введите фамилию: ");
    String surname = scannerCase5.nextLine();
    newName = new Name(name2, surname);  // Конструктор с двумя параметрами

Case "3" - Полное ФИО:
    System.out.print("Введите имя: ");
    String name3 = scannerCase5.nextLine();
    System.out.print("Введите фамилию: ");
    String surname3 = scannerCase5.nextLine(); 
    System.out.print("Введите отчество: ");
    String middleName = scannerCase5.nextLine();
    newName = new Name(name3, surname3, middleName);  // Конструктор с тремя параметрами

Система Case 6:

1. Создание основателя рода - Льва:
    PeopleWithAge lev = new PeopleWithAge("Лев", 170);
    •	Способ создания: через строку имени и числовое значение роста
    •	Рост: 170
    •	Отец: не указан (вероятно, null)
2. Создание Сергея - сына Льва:
    Name sergeyName = new Name("Сергей", "Пушкин");
    PeopleWithAge sergey = new PeopleWithAge(sergeyName, 168, lev);
    •	Способ создания: через объект Name (имя+фамилия), рост и объект отца
    •	ФИО: Сергей Пушкин
    •	Рост: 168
    •	Отец: Лев (созданный ранее объект)
3. Создание Александра - сына Сергея:
    PeopleWithAge alexander = new PeopleWithAge("Александр", 167, sergey);
    •	Способ создания: через строку имени, рост и объект отца
    •	Имя: Александр (фамилия наследуется от отца)
    •	Рост: 167
    •	Отец: Сергей

Задание 5 – (7 - Создание Кота Барсика.)
В данном задании было необходимо создать сущность Cat, соответствующей данным параметрам:
Создайте сущность Кот, которая описывается следующим образом: 
• Имеет Имя (строка)
• Для создания необходимо указать имя кота.
• Может быть приведен к текстовой форме вида: “кот: Имя” 
• Может помяукать, что приводит к выводу на экран следующего текста: “Имя: мяу!”, вызвать мяуканье можно без параметров. 
• Может помяукать Nраз, что приводит к выводу на экран следующего текста: “Имя: мяумяу-…-мяу!”, где количество “мяу”равно N. 
Создайте кота по имени “Барсик”, и затем пусть он помяукает сначала один раз, а затем три раза.
В ходе выполнения данного задания был создан case 7, в котором вызывался класс Cat.

Система case 7:
1. Создание кота с пользовательским именем:
    System.out.println("Введите имя кота: ");
    String catName = scannerCase7.nextLine();
    Cat cat = new Cat(catName);
2. Настройка поведения - количество мяуканий:
    System.out.println("Сколько раз мяукнуть? ");
    int meowCount = scannerCase7.nextInt();
3. Вызов методов кота:
  Однократное мяуканье:
    cat.meow();  // Вероятно, выводит "Мяу!" один раз
  Многократное мяуканье:
    cat.meow(meowCount);  // Мяукает указанное количество раз
  Вывод информации о коте:
    System.out.println(cat);  // Вызывает toString() объекта Cat

Система класса Cat:
Класс Cat состояит из свойств, конструкторов и методов.

Свойства и конструкторы
public Cat(String name) 
public String getName() 

Методы:
1) public String toString()
Метод формирует текстовое представление кота
Пример:
Кот: Барсик

2) public void meow() 
Метод формирует текстовое представление одного "мяу"
Пример:
Барсик: Мяу!

3) public void meow(int n)
Метод формирует текстовое представление n-го количества "мяу"
Пример:
Барсик: мяу-мяу-мяу!

Класс GlobalVerification содержит в себе методы 
1)public int meni(int number)
Метод формирует подменю основного меню
Пример: 
System.out.println("Выберите действие");
        System.out.println("1 - МЕНЮ");
        System.out.println("2 - повторить задание");
        System.out.println("0 - ВЫХОД");
1 - выход в основоное меню

2) public int height(int number)
Метод проверяет корректность введённого роста
Пример: 
int x = -1;
Введите корректный рост человека

3) public int numberNum(int number)
Метод проверяет положительность числа
Пример:
int x = -1;
Введите положительное число от 1

4) public String stringWithoutNum() 
Метод проверяет наличие цифр в строке
Пример:
string = "asd456"
Есть цифры! Введите строку заново: 

5) public int validateHeight()
Метод проверяет корректность ввода роста
Пример:
int x = -1;
"Некорректный рост " + x + ". Введите корректный рост (140-230 см): 
































